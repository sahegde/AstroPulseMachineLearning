package org.siemens.spark;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.storage.StorageLevel;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.receiver.Receiver;
import org.siemens.astro.AstronautHealthDataGenerator;

import scala.Tuple2;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;
import java.util.Arrays;
import java.util.Iterator;
import java.util.regex.Pattern;

/**
 * Custom Receiver that receives data over a socket. Received bytes is
 * interpreted as text and \n delimited lines are considered as records. They
 * are then counted and printed.
 *
 * Usage: JavaCustomReceiver <master> <hostname> <port> <master> is the Spark
 * master URL. In local mode, <master> should be 'local[n]' with n > 1.
 * <hostname> and <port> of the TCP server that Spark Streaming would connect to
 * receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server `$
 * nc -lk 9999` and then run the example `$ bin/run-example
 * org.apache.spark.examples.streaming.JavaCustomReceiver localhost 9999`
 */

public class PulseSparkHandler extends Receiver<String> {
	private static final Pattern SPACE = Pattern.compile(" ");

	public static void main(String[] args) throws Exception {
		/*
		 * if (args.length < 2) {
		 * System.err.println("Usage: JavaCustomReceiver <hostname> <port>");
		 * System.exit(1); }
		 */

		// StreamingExamples.setStreamingLogLevels();
		// Logger.getRootLogger().setLevel(Level.WARN);

		// Create the context with a 1 second batch size
		SparkConf sparkConf = new SparkConf().setAppName("PulseSparkHandler");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(1000));
		Logger.getLogger("org").setLevel(Level.OFF);
		Logger.getLogger("akka").setLevel(Level.OFF);

		// Create an input stream with the custom receiver on target ip:port and
		// count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		JavaReceiverInputDStream<String> lines = ssc.receiverStream(new PulseSparkHandler());
		JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {
			@Override
			public Iterator<String> call(String x) {
				return Arrays.asList(SPACE.split(x)).iterator();
			}
		});
		JavaPairDStream<String, Integer> wordCounts = words.mapToPair(new PairFunction<String, String, Integer>() {
			@Override
			public Tuple2<String, Integer> call(String s) {
				return new Tuple2<String, Integer>(s, 1);
			}
		}).reduceByKey(new Function2<Integer, Integer, Integer>() {
			@Override
			public Integer call(Integer i1, Integer i2) {
				return i1 + i2;
			}
		});

		wordCounts.print();
		ssc.start();
		ssc.awaitTermination();
	}

	// ============= Receiver code that receives data over a socket
	// ==============

	String host = null;
	int port = -1;

	public PulseSparkHandler() {
			super(StorageLevel.MEMORY_AND_DISK_2());
		}

	public void onStart() {
		// Start the thread that receives data over a connection
		new Thread() {
			@Override
			public void run() {
				receive();
			}
		}.start();
	}

	public void onStop() {
		// There is nothing much to do as the thread calling receive()
		// is designed to stop by itself isStopped() returns false
	}

	/** Create a socket connection and receive data until receiver is stopped */
	private void receive() {
		// System.out.println("sandeep");
		/*
		 * String heartBeat[] = { "ok", "notok" }; String pulseRate[] = {
		 * "fine", "notwell" }; String bloodLevel[] = { "high", "low" }; //
		 * there should be lot more parameters like this
		 * 
		 * while (true) { store(heartBeat[(int) (Math.random() *
		 * (heartBeat.length))] + " " + pulseRate[(int) (Math.random() *
		 * (pulseRate.length))] + " " + bloodLevel[(int) (Math.random() *
		 * (bloodLevel.length))]); try { Thread.sleep(1000); } catch (Exception
		 * e) { System.out.println(e.getMessage()); } }
		 */

		while (true) {
			store(AstronautHealthDataGenerator.dataGenerator());
			try {
				Thread.sleep(1000);
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
	}
}
